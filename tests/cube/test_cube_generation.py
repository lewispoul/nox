"""
Tests for cube file generation and handling.
"""

import tempfile
from pathlib import Path

import pytest

from nox.artifacts.cubes import (
    find_cube_tools,
    generate_cubes_from_molden,
    get_cube_info,
    validate_cube_file,
)


class TestCubeGeneration:
    """Test cube file generation functionality."""

    def test_find_cube_tools(self):
        """Test that we can identify available cube generation tools."""
        tools = find_cube_tools()

        # Should return a dictionary with tool names as keys
        expected_tools = ["multiwfn", "cubegen", "molden2aim", "xtb"]
        for tool in expected_tools:
            assert tool in tools
            # Values should be either None or path strings
            assert tools[tool] is None or isinstance(tools[tool], str)

    def test_generate_placeholder_cubes(self):
        """Test generation of placeholder cube files for testing."""
        with tempfile.TemporaryDirectory() as temp_dir:
            work_dir = Path(temp_dir)

            # Create a minimal molden file (not used for placeholders but needed)
            molden_file = work_dir / "test.molden"
            molden_file.write_text("# Minimal molden file for testing")

            # Generate cubes (should create placeholders when no tools available)
            cube_files = generate_cubes_from_molden(
                molden_file, work_dir, ["homo", "lumo"]
            )

            # Should have generated cube files
            assert len(cube_files) >= 0  # Might be 0 if real tools are available

            # If placeholder cubes were created, validate them
            for cube_file in cube_files:
                assert cube_file.exists()
                assert cube_file.suffix == ".cube"

                # Validate cube file structure
                cube_info = validate_cube_file(cube_file)
                if cube_info["valid"]:
                    assert cube_info["natoms"] > 0
                    assert len(cube_info["grid_points"]) == 3

    def test_validate_cube_file_invalid(self):
        """Test validation of invalid cube files."""
        with tempfile.TemporaryDirectory() as temp_dir:
            work_dir = Path(temp_dir)

            # Create an invalid cube file
            invalid_cube = work_dir / "invalid.cube"
            invalid_cube.write_text("This is not a valid cube file")

            # Should detect as invalid
            cube_info = validate_cube_file(invalid_cube)
            assert not cube_info["valid"]
            assert "error" in cube_info

    def test_validate_cube_file_missing(self):
        """Test validation of non-existent cube files."""
        missing_cube = Path("/nonexistent/file.cube")

        with pytest.raises(FileNotFoundError):
            validate_cube_file(missing_cube)

    def test_get_cube_info(self):
        """Test getting human-readable cube information."""
        with tempfile.TemporaryDirectory() as temp_dir:
            work_dir = Path(temp_dir)

            # Create a minimal valid cube file
            cube_file = work_dir / "test.cube"
            cube_content = """Test cube file
Generated by NOX
    2    0.000000    0.000000    0.000000
   10    0.200000    0.000000    0.000000
   10    0.000000    0.200000    0.000000
   10    0.000000    0.000000    0.200000
    1    1.000000    0.000000    0.000000    0.000000
    1    1.000000    2.000000    0.000000    0.000000
"""
            # Add some minimal volumetric data
            for i in range(10):
                for j in range(10):
                    for k in range(10):
                        cube_content += "  1.234567e-03"
                        if (k + 1) % 6 == 0:
                            cube_content += "\n"
                    cube_content += "\n"
                cube_content += "\n"

            cube_file.write_text(cube_content)

            # Get info string
            info = get_cube_info(cube_file)
            assert isinstance(info, str)
            assert "cube file" in info.lower() or "invalid" in info.lower()


class TestCubeIntegration:
    """Test integration with XTB workflow."""

    def test_cube_generation_workflow(self):
        """Test the full cube generation workflow."""
        with tempfile.TemporaryDirectory() as temp_dir:
            work_dir = Path(temp_dir)

            # Create a mock molden file
            molden_file = work_dir / "orbitals.molden"
            molden_content = """[Molden Format]
[Title]
Test molecule
[Atoms] Angs
C   1   1   0.000000   0.000000   0.000000
H   2   1   1.100000   0.000000   0.000000
[GTO]
  1 0
 S   3   1.00
      71.616837  0.154329
       13.045096  0.535328
        3.530512  0.444635
"""
            molden_file.write_text(molden_content)

            # Generate cubes
            cube_files = generate_cubes_from_molden(
                molden_file, work_dir, ["homo", "lumo"]
            )

            # Verify results
            if cube_files:  # Only if cubes were generated
                homo_found = any("homo" in f.name for f in cube_files)
                lumo_found = any("lumo" in f.name for f in cube_files)

                # At least one type should be found if generation succeeded
                assert homo_found or lumo_found or len(cube_files) > 0

    def test_cube_error_handling(self):
        """Test error handling in cube generation."""
        with tempfile.TemporaryDirectory() as temp_dir:
            work_dir = Path(temp_dir)

            # Try to generate cubes from non-existent molden file
            nonexistent_molden = work_dir / "nonexistent.molden"

            with pytest.raises(FileNotFoundError):
                generate_cubes_from_molden(nonexistent_molden, work_dir, ["homo"])


if __name__ == "__main__":
    pytest.main([__file__])

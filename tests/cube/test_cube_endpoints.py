"""
End-to-end tests for XTB cube generation via API.
"""

import tempfile
from pathlib import Path

import pytest


# Test the cube endpoint integration
@pytest.mark.asyncio
async def test_xtb_cube_generation_endpoint():
    """Test that XTB job can generate cube artifacts when requested."""
    # This test verifies the cube generation integration works
    # It's a placeholder that can be enhanced when the API is fully integrated

    # For now, just verify our cube module can be imported and used
    from nox.artifacts.cubes import find_cube_tools, validate_cube_file

    # Test tool discovery
    tools = find_cube_tools()
    assert isinstance(tools, dict)
    assert "xtb" in tools

    # Test validation function exists and works
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create a minimal cube file
        cube_path = Path(temp_dir) / "test.cube"
        cube_content = """Test cube
Generated by NOX
    1    0.000000    0.000000    0.000000
    5    0.200000    0.000000    0.000000  
    5    0.000000    0.200000    0.000000
    5    0.000000    0.000000    0.200000
    1    1.000000    0.000000    0.000000    0.000000
"""
        # Add minimal data
        for i in range(5):
            for j in range(5):
                for k in range(5):
                    cube_content += "  1.0e-03"
                    if (k + 1) % 6 == 0:
                        cube_content += "\n"
                cube_content += "\n"
            cube_content += "\n"

        cube_path.write_text(cube_content)

        # Validate the cube file
        info = validate_cube_file(cube_path)
        assert "valid" in info


@pytest.mark.skip(reason="Requires XTB binary and full API integration")
async def test_api_cube_workflow():
    """Test the full API workflow with cube generation.

    This test is skipped by default as it requires:
    1. XTB binary to be installed
    2. Full API server running
    3. Job queue system active
    """
    # This would test:
    # 1. POST /jobs with cubes=true parameter
    # 2. Wait for job completion
    # 3. GET /jobs/{id}/artifacts and verify cube files are present
    # 4. Validate cube file contents and metadata
    pass


if __name__ == "__main__":
    pytest.main([__file__, "-v"])

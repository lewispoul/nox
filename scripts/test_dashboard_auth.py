#!/usr/bin/env python3
"""
Test du client d'authentification pour le dashboard Nox API v2.3
"""
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire dashboard au PATH
sys.path.insert(0, str(Path(__file__).parent.parent / "dashboard"))

from client_v23 import NoxAuthClient

def test_authentication():
    """Test complet de l'authentification"""
    
    print("üöÄ Test du client d'authentification Nox API v2.3")
    print("=" * 50)
    
    client = NoxAuthClient("http://127.0.0.1:8081")
    
    # Test 1: V√©rification de l'API
    print("\n1Ô∏è‚É£  Test de connectivit√©...")
    try:
        health, headers = client.health()
        print(f"‚úÖ API v{health.get('version')} accessible")
        print(f"   Request-ID: {headers.get('x-request-id', 'N/A')}")
    except Exception as e:
        print(f"‚ùå Erreur connectivit√©: {e}")
        return
    
    # Test 2: Initialisation admin
    print("\n2Ô∏è‚É£  Initialisation admin...")
    try:
        admin_info, _ = client.init_admin()
        print(f"‚úÖ Admin cr√©√©: {admin_info.get('email')}")
    except Exception as e:
        print(f"‚ÑπÔ∏è  Admin existe d√©j√† ou erreur: {e}")
    
    # Test 3: Connexion admin
    print("\n3Ô∏è‚É£  Connexion admin...")
    try:
        token_data, headers = client.login("admin@example.com", "admin123")
        print(f"‚úÖ Connexion admin r√©ussie")
        print(f"   Token: {token_data['access_token'][:50]}...")
        print(f"   Expire dans: {token_data['expires_in']} secondes")
        
        # Le token est automatiquement configur√© dans le client
        
    except Exception as e:
        print(f"‚ùå Erreur connexion admin: {e}")
        return
    
    # Test 4: Profil utilisateur
    print("\n4Ô∏è‚É£  Profil utilisateur...")
    try:
        user_info, _ = client.get_me()
        print(f"‚úÖ Utilisateur connect√©: {user_info['email']}")
        print(f"   R√¥le: {user_info['role']}")
        print(f"   Quotas: {user_info['quota_files']} fichiers, {user_info['quota_cpu_seconds']}s CPU, {user_info['quota_memory_mb']}MB RAM")
    except Exception as e:
        print(f"‚ùå Erreur profil: {e}")
    
    # Test 5: Fonctionnalit√©s authentifi√©es
    print("\n5Ô∏è‚É£  Test des fonctionnalit√©s authentifi√©es...")
    
    # Ex√©cution Python
    try:
        result, headers = client.run_py('print("Authentification fonctionnelle!")\nprint("Admin access confirmed")')
        print(f"‚úÖ Ex√©cution Python: {result['stdout'].strip()}")
        print(f"   Utilisateur: {result.get('user', 'N/A')}")
    except Exception as e:
        print(f"‚ùå Erreur ex√©cution Python: {e}")
    
    # Listing des fichiers
    try:
        files_data, _ = client.list_files()
        files_count = len(files_data.get('files', []))
        print(f"‚úÖ Listing fichiers: {files_count} √©l√©ments")
        print(f"   Utilisateur: {files_data.get('user', 'N/A')}")
    except Exception as e:
        print(f"‚ùå Erreur listing: {e}")
    
    # Test 6: Fonctionnalit√©s admin
    print("\n6Ô∏è‚É£  Test des fonctionnalit√©s admin...")
    
    # Statistiques utilisateurs
    try:
        stats, _ = client.get_user_stats()
        print(f"‚úÖ Statistiques: {stats['total_users']} utilisateurs total")
        print(f"   Actifs: {stats['active_users']}, Admins: {stats['admin_users']}")
    except Exception as e:
        print(f"‚ùå Erreur statistiques: {e}")
    
    # Liste des utilisateurs
    try:
        users, _ = client.list_users(limit=10)
        print(f"‚úÖ Liste utilisateurs: {len(users)} utilisateurs r√©cup√©r√©s")
        for user in users[:3]:  # Afficher les 3 premiers
            print(f"   - {user['email']} ({user['role']})")
    except Exception as e:
        print(f"‚ùå Erreur liste utilisateurs: {e}")
    
    # Informations admin
    try:
        admin_info, _ = client.admin_info()
        print(f"‚úÖ Acc√®s admin confirm√©")
        print(f"   Admin: {admin_info.get('admin_user')}")
        print(f"   M√©triques: {'activ√©es' if admin_info.get('metrics_enabled') else 'd√©sactiv√©es'}")
    except Exception as e:
        print(f"‚ùå Erreur info admin: {e}")
    
    # Test 7: Test d'un utilisateur r√©gulier
    print("\n7Ô∏è‚É£  Test utilisateur r√©gulier...")
    
    # Cr√©er un utilisateur test
    user_client = NoxAuthClient("http://127.0.0.1:8081")
    
    try:
        # Inscription
        user_token, _ = user_client.register("testuser@example.com", "password123", "user")
        print(f"‚úÖ Utilisateur test cr√©√© et connect√©")
        
        # Test des permissions
        try:
            user_info, _ = user_client.get_me()
            print(f"   Utilisateur: {user_info['email']} (r√¥le: {user_info['role']})")
            
            # Test ex√©cution (autoris√©e)
            result, _ = user_client.run_py('print("User execution test")')
            print(f"   ‚úÖ Ex√©cution autoris√©e: {result['stdout'].strip()}")
            
            # Test acc√®s admin (interdit)
            try:
                user_client.get_user_stats()
                print(f"   ‚ùå ERREUR: Acc√®s admin autoris√© pour un user!")
            except Exception:
                print(f"   ‚úÖ Acc√®s admin correctement refus√©")
                
        except Exception as e:
            print(f"   ‚ùå Erreur utilisateur test: {e}")
            
    except Exception as e:
        print(f"‚ÑπÔ∏è  Utilisateur test existe d√©j√† ou erreur: {e}")
    
    # Test 8: M√©triques
    print("\n8Ô∏è‚É£  Test des m√©triques...")
    try:
        metrics, headers = client.get_metrics()
        print(f"‚úÖ M√©triques r√©cup√©r√©es: {len(metrics)} caract√®res")
        print(f"   Contient nox_requests_total: {'nox_requests_total' in metrics}")
        print(f"   Request-ID: {headers.get('x-request-id', 'N/A')}")
    except Exception as e:
        print(f"‚ùå Erreur m√©triques: {e}")
    
    print("\n‚úÖ Tests du client d'authentification termin√©s!")

if __name__ == "__main__":
    test_authentication()

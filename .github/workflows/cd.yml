# Nox API v7.0.0 - Continuous Deployment Pipeline
# Automated deployment to staging and production environments

name: CD - Continuous Deployment

on:
  workflow_run:
    workflows: ["CI - Continuous Integration"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Image version to deploy'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/nox-api

jobs:
  # ===== STAGING DEPLOYMENT =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch')
    environment: staging
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Deploy to ECS Staging
      run: |
        # Update ECS service with new image
        aws ecs update-service \
          --cluster nox-staging-cluster \
          --service nox-api-staging \
          --task-definition nox-api-staging:LATEST \
          --force-new-deployment
        
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster nox-staging-cluster \
          --services nox-api-staging

    - name: Run Staging Smoke Tests
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_API_URL }}/api/v7/auth/health
        curl -f ${{ secrets.STAGING_API_URL }}/api/v7/status

    - name: Notify Staging Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          üöÄ Nox API v7.0.0 deployed to STAGING
          Environment: staging
          Commit: ${{ github.sha }}
          Status: ${{ job.status }}

  # ===== PRODUCTION DEPLOYMENT =====  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && (success() || github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Manual Approval Required
      uses: trstringer/manual-approval@v1
      if: github.event_name != 'workflow_dispatch'
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ secrets.PRODUCTION_APPROVERS }}
        minimum-approvals: 2
        issue-title: "Deploy Nox API v7.0.0 to Production"
        issue-body: |
          Please review and approve the production deployment of Nox API v7.0.0
          
          **Changes:**
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref }}
          - Staging tests: Passed
          
          **Deployment Details:**
          - Environment: Production
          - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          - OAuth2 Integration: Complete
          - Database migrations: Required

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Pre-deployment Database Backup
      run: |
        # Create database backup before deployment
        aws rds create-db-snapshot \
          --db-instance-identifier nox-production-db \
          --db-snapshot-identifier nox-backup-$(date +%Y%m%d-%H%M%S)

    - name: Blue-Green Deployment
      run: |
        # Deploy to green environment
        aws ecs update-service \
          --cluster nox-production-cluster \
          --service nox-api-production-green \
          --task-definition nox-api-production:LATEST \
          --force-new-deployment
        
        # Wait for green deployment
        aws ecs wait services-stable \
          --cluster nox-production-cluster \
          --services nox-api-production-green

    - name: Production Health Checks
      run: |
        sleep 60
        
        # Health check green environment
        for i in {1..10}; do
          if curl -f ${{ secrets.PRODUCTION_GREEN_URL }}/api/v7/auth/health; then
            echo "Green environment healthy"
            break
          fi
          echo "Attempt $i failed, retrying..."
          sleep 10
        done
        
        # Validate OAuth2 endpoints
        curl -f ${{ secrets.PRODUCTION_GREEN_URL }}/api/v7/status

    - name: Switch Traffic to Green
      run: |
        # Update load balancer to point to green environment
        aws elbv2 modify-target-group \
          --target-group-arn ${{ secrets.PRODUCTION_TARGET_GROUP_ARN }} \
          --health-check-path /api/v7/auth/health
        
        # Wait for traffic switch
        sleep 30

    - name: Final Production Validation
      run: |
        # Test production endpoints
        curl -f ${{ secrets.PRODUCTION_API_URL }}/api/v7/auth/health
        curl -f ${{ secrets.PRODUCTION_API_URL }}/api/v7/status
        curl -f ${{ secrets.PRODUCTION_API_URL }}/api/v7/metrics/prometheus

    - name: Scale Down Blue Environment
      run: |
        # Scale down old blue environment
        aws ecs update-service \
          --cluster nox-production-cluster \
          --service nox-api-production-blue \
          --desired-count 0

    - name: Update Production DNS
      run: |
        # Update Route53 records if needed
        aws route53 change-resource-record-sets \
          --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} \
          --change-batch file://dns-update.json

    - name: Notify Production Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          üéâ Nox API v7.0.0 deployed to PRODUCTION
          Environment: production
          Commit: ${{ github.sha }}
          Status: ${{ job.status }}
          URL: ${{ secrets.PRODUCTION_API_URL }}

  # ===== ROLLBACK CAPABILITY =====
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Rollback to Previous Version
      run: |
        # Rollback ECS service to previous task definition
        aws ecs update-service \
          --cluster nox-production-cluster \
          --service nox-api-production \
          --task-definition nox-api-production:PREVIOUS
        
        # Wait for rollback to complete
        aws ecs wait services-stable \
          --cluster nox-production-cluster \
          --services nox-api-production

    - name: Notify Rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ‚ö†Ô∏è ROLLBACK: Nox API v7.0.0 deployment rolled back
          Reason: Deployment failure
          Environment: production
          Action: Automatic rollback initiated

  # ===== POST-DEPLOYMENT MONITORING =====
  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
    - name: Setup Monitoring Alerts
      run: |
        # Enable enhanced monitoring
        aws logs create-log-group \
          --log-group-name /nox-api/production/deployment-$(date +%Y%m%d)

    - name: Performance Baseline Check
      run: |
        # Run performance validation
        sleep 120  # Allow metrics to populate
        
        # Check key metrics are within acceptable ranges
        python scripts/validate-deployment-metrics.py \
          --environment production \
          --duration 300 \
          --max-response-time 500ms \
          --min-success-rate 99.5%

    - name: Create Deployment Record
      run: |
        # Record deployment in tracking system
        curl -X POST ${{ secrets.DEPLOYMENT_TRACKER_URL }} \
          -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_TRACKER_TOKEN }}" \
          -d '{
            "service": "nox-api",
            "version": "v7.0.0",
            "environment": "production",
            "deployed_at": "'$(date -Iseconds)'",
            "commit_sha": "${{ github.sha }}",
            "status": "success"
          }'

'use client';

import { useCallback, useState } from 'react';
import { Endpoint } from '../types/api';

interface SDKGeneratorProps {
  endpoint: Endpoint;
  generatedPayload?: string;
}

type SDKLanguage = 'typescript' | 'python' | 'curl' | 'javascript';

interface SDKTemplate {
  language: SDKLanguage;
  name: string;
  icon: string;
  extension: string;
  example: string;
}

export default function SDKGenerator({ endpoint, generatedPayload = '' }: SDKGeneratorProps) {
  const [selectedLanguage, setSelectedLanguage] = useState<SDKLanguage>('typescript');
  const [generatedCode, setGeneratedCode] = useState<string>('');
  const [includeAuth, setIncludeAuth] = useState<boolean>(endpoint.requiresAuth);
  const [includeErrorHandling, setIncludeErrorHandling] = useState<boolean>(true);
  const [includeComments, setIncludeComments] = useState<boolean>(true);
  const [apiBaseUrl, setApiBaseUrl] = useState<string>('https://api.nox.local');
  const [isGenerating, setIsGenerating] = useState<boolean>(false);

  const sdkTemplates: SDKTemplate[] = [
    {
      language: 'typescript',
      name: 'TypeScript',
      icon: '⚡',
      extension: 'ts',
      example: 'Modern TypeScript with async/await'
    },
    {
      language: 'python',
      name: 'Python',
      icon: '🐍',
      extension: 'py',
      example: 'Python with requests library'
    },
    {
      language: 'javascript',
      name: 'JavaScript',
      icon: '🟨',
      extension: 'js',
      example: 'Vanilla JavaScript with fetch'
    },
    {
      language: 'curl',
      name: 'cURL',
      icon: '🌐',
      extension: 'sh',
      example: 'Command-line HTTP requests'
    }
  ];

  const generateTypeScriptSDK = useCallback(() => {
    const { method, path, summary = '' } = endpoint;
    const methodLower = method.toLowerCase();
    const pathWithParams = path.replace(/{([^}]+)}/g, '${$1}');
    const hasPayload = ['post', 'put', 'patch'].includes(methodLower);

    let payload = '';
    if (hasPayload && generatedPayload) {
      try {
        const parsed = JSON.parse(generatedPayload);
        payload = JSON.stringify(parsed, null, 2).replace(/^/gm, '  ');
      } catch {
        payload = '  // Add your request payload here';
      }
    }

    const authHeader = includeAuth ? `
  headers: {
    'Authorization': 'Bearer YOUR_API_TOKEN',
    'Content-Type': 'application/json'
  },` : `
  headers: {
    'Content-Type': 'application/json'
  },`;

    const pathParams = path.match(/{([^}]+)}/g);
    const paramDefs = pathParams?.map(param => param.replace(/{|}/g, '')).join(', ') || '';

    let code = '';

    if (includeComments) {
      code += `/**
 * ${summary || `${method} ${path}`}
 * Generated by NOX API SDK Generator
 */
`;
    }

    if (pathParams?.length) {
      code += `async function ${methodLower}${endpoint.path.split('/').pop()?.replace(/{.*}/, '') || 'endpoint'}(${paramDefs}: string`;
      if (hasPayload) code += ', data: any';
      code += '): Promise<any> {\n';
    } else {
      code += `async function ${methodLower}${endpoint.path.split('/').pop() || 'endpoint'}(`;
      if (hasPayload) code += 'data: any';
      code += '): Promise<any> {\n';
    }

    if (includeErrorHandling) {
      code += '  try {\n    ';
    } else {
      code += '  ';
    }

    code += `const response = await fetch(\`${apiBaseUrl}${pathWithParams}\`, {
      method: '${method}',${authHeader}`;

    if (hasPayload) {
      code += `
      body: JSON.stringify(${payload ? 'data' : '{\n        // Your request data here\n      }'}),`;
    }

    code += `
    });

    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }

    return await response.json();`;

    if (includeErrorHandling) {
      code += `
  } catch (error) {
    console.error('API request failed:', error);
    throw error;
  }`;
    }

    code += '\n}';

    if (includeComments) {
      code += `

// Usage example:
// const result = await ${methodLower}${endpoint.path.split('/').pop()?.replace(/{.*}/, '') || 'endpoint'}(${pathParams?.length ? paramDefs.split(', ').map(p => `'${p}_value'`).join(', ') : ''}${hasPayload ? (pathParams?.length ? ', ' : '') + '{ /* your data */ }' : ''});
// console.log(result);`;
    }

    return code;
  }, [endpoint, generatedPayload, includeAuth, includeErrorHandling, includeComments, apiBaseUrl]);

  const generatePythonSDK = useCallback(() => {
    const { method, path, summary = '' } = endpoint;
    const methodLower = method.toLowerCase();
    const hasPayload = ['post', 'put', 'patch'].includes(methodLower);

    const pathParams = path.match(/{([^}]+)}/g);
    const pythonPath = path.replace(/{([^}]+)}/g, '{$1}');

    let code = '';

    if (includeComments) {
      code += `"""
${summary || `${method} ${path}`}
Generated by NOX API SDK Generator
"""
`;
    }

    code += `import requests
import json
from typing import Dict, Any, Optional

`;

    // Function signature
    code += `def ${methodLower}_${endpoint.path.split('/').pop()?.replace(/{.*}/, '') || 'endpoint'}(`;

    const params: string[] = [];
    if (pathParams?.length) {
      params.push(...pathParams.map(param => param.replace(/{|}/g, '') + ': str'));
    }
    if (hasPayload) params.push('data: Dict[str, Any]');
    if (includeAuth) params.push('api_token: Optional[str] = None');

    code += params.join(', ');
    code += ') -> Dict[str, Any]:\n';

    if (includeComments) {
      code += `    """
    ${summary || `Execute ${method} request to ${path}`}
    
    Args:`;
      if (pathParams?.length) {
        pathParams.forEach(param => {
          const paramName = param.replace(/{|}/g, '');
          code += `
        ${paramName}: The ${paramName} parameter`;
        });
      }
      if (hasPayload) {
        code += `
        data: Request payload data`;
      }
      if (includeAuth) {
        code += `
        api_token: Optional API authentication token`;
      }
      code += `
    
    Returns:
        Dict containing the API response
    """
`;
    }

    // Headers setup
    code += '    headers = {\n        "Content-Type": "application/json"';
    if (includeAuth) {
      code += `,
        "Authorization": f"Bearer {api_token}" if api_token else ""`;
    }
    code += '\n    }\n\n';

    // URL construction
    if (pathParams?.length) {
      code += `    url = f"${apiBaseUrl}${pythonPath}"\n`;
    } else {
      code += `    url = "${apiBaseUrl}${path}"\n`;
    }

    // Request execution
    if (includeErrorHandling) {
      code += '    try:\n        ';
    } else {
      code += '    ';
    }

    if (hasPayload) {
      code += `response = requests.${methodLower}(url, headers=headers, json=data)`;
    } else {
      code += `response = requests.${methodLower}(url, headers=headers)`;
    }

    code += `
        response.raise_for_status()
        return response.json()`;

    if (includeErrorHandling) {
      code += `
    except requests.exceptions.RequestException as e:
        print(f"API request failed: {e}")
        raise`;
    }

    if (includeComments) {
      code += `


# Usage example:
# result = ${methodLower}_${endpoint.path.split('/').pop()?.replace(/{.*}/, '') || 'endpoint'}(`;
      
      const exampleArgs: string[] = [];
      if (pathParams?.length) {
        exampleArgs.push(...pathParams.map(param => `"${param.replace(/{|}/g, '')}_value"`));
      }
      if (hasPayload) {
        exampleArgs.push('{"key": "value"}');
      }
      if (includeAuth) {
        exampleArgs.push('"your_api_token"');
      }
      
      code += exampleArgs.join(', ');
      code += `)
# print(result)`;
    }

    return code;
  }, [endpoint, includeAuth, includeErrorHandling, includeComments, apiBaseUrl]);

  const generateJavaScriptSDK = useCallback(() => {
    const { method, path, summary = '' } = endpoint;
    const methodLower = method.toLowerCase();
    const pathWithParams = path.replace(/{([^}]+)}/g, '${$1}');
    const hasPayload = ['post', 'put', 'patch'].includes(methodLower);

    let code = '';

    if (includeComments) {
      code += `/**
 * ${summary || `${method} ${path}`}
 * Generated by NOX API SDK Generator
 */
`;
    }

    const pathParams = path.match(/{([^}]+)}/g);
    const paramDefs = pathParams?.map(param => param.replace(/{|}/g, '')).join(', ') || '';

    code += `function ${methodLower}${endpoint.path.split('/').pop()?.replace(/{.*}/, '') || 'Endpoint'}(`;
    
    const params: string[] = [];
    if (pathParams?.length) params.push(paramDefs);
    if (hasPayload) params.push('data');
    
    code += params.join(', ');
    code += ') {\n';

    if (includeErrorHandling) {
      code += '  return ';
    } else {
      code += '  ';
    }

    code += `fetch(\`${apiBaseUrl}${pathWithParams}\`, {
    method: '${method}',
    headers: {`;

    if (includeAuth) {
      code += `
      'Authorization': 'Bearer YOUR_API_TOKEN',`;
    }

    code += `
      'Content-Type': 'application/json'
    }`;

    if (hasPayload) {
      code += `,
    body: JSON.stringify(data)`;
    }

    code += `
  })`;

    if (includeErrorHandling) {
      code += `
  .then(response => {
    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }
    return response.json();
  })
  .catch(error => {
    console.error('API request failed:', error);
    throw error;
  });`;
    } else {
      code += `
  .then(response => response.json());`;
    }

    code += '\n}';

    if (includeComments) {
      code += `

// Usage example:
// ${methodLower}${endpoint.path.split('/').pop()?.replace(/{.*}/, '') || 'Endpoint'}(${pathParams?.length ? paramDefs.split(', ').map(p => `'${p}_value'`).join(', ') : ''}${hasPayload ? (pathParams?.length ? ', ' : '') + '{ /* your data */ }' : ''})
//   .then(result => console.log(result));`;
    }

    return code;
  }, [endpoint, includeAuth, includeErrorHandling, includeComments, apiBaseUrl]);

  const generateCurlSDK = useCallback(() => {
    const { method, path, summary = '' } = endpoint;
    const hasPayload = ['POST', 'PUT', 'PATCH'].includes(method);

    let code = '';

    if (includeComments) {
      code += `#!/bin/bash
# ${summary || `${method} ${path}`}
# Generated by NOX API SDK Generator

`;
    }

    // Environment variables
    code += `API_BASE_URL="${apiBaseUrl}"`;
    if (includeAuth) {
      code += `
API_TOKEN="YOUR_API_TOKEN"`;
    }
    code += '\n\n';

    // Path parameters setup
    const pathParams = path.match(/{([^}]+)}/g);
    if (pathParams?.length) {
      code += '# Set path parameters\n';
      pathParams.forEach(param => {
        const paramName = param.replace(/{|}/g, '').toUpperCase();
        code += `${paramName}="your_${param.replace(/{|}/g, '')}_value"
`;
      });
      code += '\n';
    }

    // Build the URL
    let finalPath = path;
    if (pathParams?.length) {
      pathParams.forEach(param => {
        const paramName = param.replace(/{|}/g, '').toUpperCase();
        finalPath = finalPath.replace(param, `$${paramName}`);
      });
    }

    code += `curl -X ${method} \\
  "$API_BASE_URL${finalPath}" \\`;

    // Headers
    const headers = ['"Content-Type: application/json"'];
    if (includeAuth) {
      headers.push('"Authorization: Bearer $API_TOKEN"');
    }

    code += `
  -H ${headers.join(' \\\n  -H ')}`;

    // Request body
    if (hasPayload) {
      code += ' \\\n  -d \'';
      
      if (generatedPayload) {
        try {
          const parsed = JSON.parse(generatedPayload);
          code += JSON.stringify(parsed, null, 2);
        } catch {
          code += `{
  "key": "value",
  "example": "data"
}`;
        }
      } else {
        code += `{
  "key": "value",
  "example": "data"
}`;
      }
      
      code += '\'';
    }

    if (includeErrorHandling) {
      code += ' \\\n  --fail-with-body \\\n  --show-error';
    }

    if (includeComments) {
      code += '\n\n# Example with response processing:\n# ';
      code += `curl -X ${method} \\
#   "$API_BASE_URL${finalPath}" \\
#   -H ${headers.join(' \\\n#   -H ')}`;
      
      if (hasPayload) {
        code += ' \\\n#   -d \'{"key": "value"}\'';
      }
      
      code += ' \\\n#   | jq .';
    }

    return code;
  }, [endpoint, generatedPayload, includeAuth, includeErrorHandling, includeComments, apiBaseUrl]);

  const generateSDK = useCallback(() => {
    setIsGenerating(true);
    
    let code = '';
    
    switch (selectedLanguage) {
      case 'typescript':
        code = generateTypeScriptSDK();
        break;
      case 'python':
        code = generatePythonSDK();
        break;
      case 'javascript':
        code = generateJavaScriptSDK();
        break;
      case 'curl':
        code = generateCurlSDK();
        break;
    }
    
    setGeneratedCode(code);
    setIsGenerating(false);
  }, [selectedLanguage, generateTypeScriptSDK, generatePythonSDK, generateJavaScriptSDK, generateCurlSDK]);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generatedCode);
    } catch (err) {
      console.error('Failed to copy code:', err);
    }
  };

  const downloadSDK = () => {
    const template = sdkTemplates.find(t => t.language === selectedLanguage);
    if (!template) return;

    const filename = `nox-api-${endpoint.path.split('/').pop()?.replace(/{.*}/, '') || 'endpoint'}-${selectedLanguage}.${template.extension}`;
    const blob = new Blob([generatedCode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h4 className="text-sm font-medium text-gray-900">
          🛠️ SDK Generator
        </h4>
        <div className="flex items-center space-x-2">
          <button
            onClick={generateSDK}
            disabled={isGenerating}
            className={`px-3 py-1 text-xs font-medium rounded transition-colors ${
              isGenerating 
                ? 'bg-gray-400 text-white cursor-not-allowed' 
                : 'bg-blue-600 text-white hover:bg-blue-700'
            }`}
          >
            {isGenerating ? 'Generating...' : 'Generate SDK'}
          </button>
        </div>
      </div>

      {/* Language Selection */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
        {sdkTemplates.map((template) => (
          <button
            key={template.language}
            onClick={() => setSelectedLanguage(template.language)}
            className={`p-3 text-left border rounded-lg transition-colors ${
              selectedLanguage === template.language
                ? 'border-blue-500 bg-blue-50 text-blue-900'
                : 'border-gray-200 bg-white text-gray-700 hover:bg-gray-50'
            }`}
          >
            <div className="flex items-center space-x-2 mb-1">
              <span className="text-lg">{template.icon}</span>
              <span className="font-medium text-sm">{template.name}</span>
            </div>
            <p className="text-xs text-gray-600">{template.example}</p>
          </button>
        ))}
      </div>

      {/* Configuration Options */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h5 className="text-xs font-medium text-gray-700 mb-3">SDK Configuration</h5>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Base URL */}
          <div>
            <label className="block text-xs font-medium text-gray-600 mb-1">Base URL</label>
            <input
              type="text"
              value={apiBaseUrl}
              onChange={(e) => setApiBaseUrl(e.target.value)}
              className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
            />
          </div>

          {/* Options */}
          <div className="space-y-2">
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={includeAuth}
                onChange={(e) => setIncludeAuth(e.target.checked)}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="text-xs text-gray-700">Include Authentication</span>
            </label>
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={includeErrorHandling}
                onChange={(e) => setIncludeErrorHandling(e.target.checked)}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="text-xs text-gray-700">Include Error Handling</span>
            </label>
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={includeComments}
                onChange={(e) => setIncludeComments(e.target.checked)}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="text-xs text-gray-700">Include Comments</span>
            </label>
          </div>
        </div>
      </div>

      {/* Generated Code Display */}
      {generatedCode && (
        <div className="border border-gray-200 rounded-lg bg-white">
          <div className="p-3 border-b border-gray-200 bg-gray-50">
            <div className="flex items-center justify-between">
              <h6 className="text-sm font-medium text-gray-900">
                Generated {sdkTemplates.find(t => t.language === selectedLanguage)?.name} SDK
              </h6>
              <div className="flex items-center space-x-2">
                <button
                  onClick={copyToClipboard}
                  className="px-2 py-1 text-xs font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded transition-colors"
                >
                  📋 Copy
                </button>
                <button
                  onClick={downloadSDK}
                  className="px-2 py-1 text-xs font-medium text-blue-600 hover:text-blue-800 hover:bg-blue-100 rounded transition-colors"
                >
                  💾 Download
                </button>
              </div>
            </div>
          </div>
          <div className="p-4">
            <pre className="text-xs font-mono bg-gray-900 text-gray-100 p-4 rounded overflow-x-auto whitespace-pre-wrap">
              {generatedCode}
            </pre>
          </div>
        </div>
      )}

      {/* AI Enhancement Suggestions */}
      {generatedCode && (
        <div className="bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200 rounded-lg p-4">
          <div className="flex items-center space-x-2 mb-2">
            <span className="text-purple-600">🤖</span>
            <span className="text-sm font-medium text-purple-800">AI Enhancement Suggestions</span>
          </div>
          <div className="text-sm text-purple-700 space-y-1">
            {selectedLanguage === 'typescript' && (
              <>
                <p>• Consider adding type definitions for better IntelliSense support</p>
                <p>• Add retry logic for better resilience in production environments</p>
              </>
            )}
            {selectedLanguage === 'python' && (
              <>
                <p>• Consider using async/await for better performance with asyncio</p>
                <p>• Add request timeout configuration for production use</p>
              </>
            )}
            {selectedLanguage === 'curl' && (
              <>
                <p>• Add --retry option for better reliability</p>
                <p>• Consider using environment variables for sensitive data</p>
              </>
            )}
            <p>• Test the generated code in your development environment before production use</p>
          </div>
        </div>
      )}
    </div>
  );
}

{
  "openapi": "3.0.3",
  "info": {
    "title": "Nox API v8.0.0",
    "description": "Advanced API platform with AI capabilities, multi-node support, and enhanced UX optimization. Includes authentication, policy management, AI integration, and comprehensive monitoring.",
    "version": "8.0.0",
    "contact": {
      "name": "Nox Development Team",
      "email": "dev@nox.example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.nox.local",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.nox.local",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "OAuth2 authentication and user management"
    },
    {
      "name": "AI",
      "description": "AI-powered security, policy, and biometric features"
    },
    {
      "name": "Nodes",
      "description": "Multi-node cluster management"
    },
    {
      "name": "Policies", 
      "description": "Policy management and enforcement"
    },
    {
      "name": "Admin",
      "description": "Administrative endpoints"
    },
    {
      "name": "Monitoring",
      "description": "Metrics, health checks, and observability"
    }
  ],
  "paths": {
    "/api/v8/auth/health": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Authentication service health check",
        "description": "Checks the health and status of the authentication service",
        "responses": {
          "200": {
            "description": "Authentication service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "Authentication service is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v8/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate a user with credentials",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v8/auth/oauth2/{provider}": {
      "get": {
        "tags": ["Authentication"],
        "summary": "OAuth2 provider login",
        "description": "Initiate OAuth2 login with supported providers (google, github, microsoft)",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["google", "github", "microsoft"]
            },
            "description": "OAuth2 provider"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to OAuth2 provider"
          },
          "400": {
            "description": "Invalid provider",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v8/ai/health": {
      "get": {
        "tags": ["AI"],
        "summary": "AI service health check",
        "description": "Checks the health and status of AI services",
        "responses": {
          "200": {
            "description": "AI services are healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIHealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "AI services are unhealthy"
          }
        }
      }
    },
    "/api/v8/ai/security/validate": {
      "post": {
        "tags": ["AI"],
        "summary": "AI security validation",
        "description": "Validate security policies using AI analysis",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityValidationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security validation completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityValidationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/v8/ai/policy/check": {
      "post": {
        "tags": ["AI"],
        "summary": "AI policy check",
        "description": "Check policy compliance using AI analysis",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy check completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCheckResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v8/ai/biometric/status": {
      "get": {
        "tags": ["AI"],
        "summary": "Biometric AI status",
        "description": "Get the status of biometric AI services",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Biometric AI status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BiometricStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v8/nodes/status": {
      "get": {
        "tags": ["Nodes"],
        "summary": "Multi-node cluster status",
        "description": "Get the status of all nodes in the cluster",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Node cluster status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v8/nodes/health": {
      "get": {
        "tags": ["Nodes"],
        "summary": "Nodes health check",
        "description": "Health check for all cluster nodes",
        "responses": {
          "200": {
            "description": "Nodes health status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesHealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "Some nodes are unhealthy"
          }
        }
      }
    },
    "/api/v8/policies": {
      "get": {
        "tags": ["Policies"],
        "summary": "List policies",
        "description": "Get all available policies",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "Number of policies to return"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            },
            "description": "Offset for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of policies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoliciesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["Policies"],
        "summary": "Create policy",
        "description": "Create a new policy",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Policy created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/v8/status": {
      "get": {
        "tags": ["Monitoring"],
        "summary": "API status",
        "description": "Get overall API status and version information",
        "responses": {
          "200": {
            "description": "API status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v8/metrics/prometheus": {
      "get": {
        "tags": ["Monitoring"],
        "summary": "Prometheus metrics",
        "description": "Get metrics in Prometheus format",
        "responses": {
          "200": {
            "description": "Prometheus metrics",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string",
            "example": "8.0.0"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "expires_in": {
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AIHealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "healthy"
          },
          "services": {
            "type": "object",
            "properties": {
              "security": {
                "type": "string",
                "example": "online"
              },
              "policy": {
                "type": "string",
                "example": "online"
              },
              "biometric": {
                "type": "string",
                "example": "online"
              }
            }
          }
        }
      },
      "SecurityValidationRequest": {
        "type": "object",
        "required": ["action", "resource"],
        "properties": {
          "action": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        }
      },
      "SecurityValidationResponse": {
        "type": "object",
        "properties": {
          "allowed": {
            "type": "boolean"
          },
          "confidence": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          },
          "reason": {
            "type": "string"
          },
          "recommendations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PolicyCheckRequest": {
        "type": "object",
        "required": ["policy_id", "data"],
        "properties": {
          "policy_id": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "PolicyCheckResponse": {
        "type": "object",
        "properties": {
          "compliant": {
            "type": "boolean"
          },
          "violations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "score": {
            "type": "number"
          }
        }
      },
      "BiometricStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "active"
          },
          "models_loaded": {
            "type": "integer"
          },
          "last_training": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NodeStatusResponse": {
        "type": "object",
        "properties": {
          "total_nodes": {
            "type": "integer"
          },
          "healthy_nodes": {
            "type": "integer"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Node"
            }
          }
        }
      },
      "Node": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["healthy", "unhealthy", "maintenance"]
          },
          "load": {
            "type": "number"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NodesHealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "healthy"
          },
          "nodes_count": {
            "type": "integer"
          },
          "healthy_percentage": {
            "type": "number"
          }
        }
      },
      "PoliciesResponse": {
        "type": "object",
        "properties": {
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Policy"
            }
          },
          "total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          }
        }
      },
      "Policy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreatePolicyRequest": {
        "type": "object",
        "required": ["name", "rules"],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "PolicyResponse": {
        "type": "object",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/Policy"
          }
        }
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "running"
          },
          "version": {
            "type": "string",
            "example": "8.0.0"
          },
          "uptime": {
            "type": "number"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["AI Integration", "Multi-node Support", "Enhanced UX"]
          }
        }
      }
    }
  }
}
